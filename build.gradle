plugins {
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java-library'
    id 'com.diffplug.spotless' version '6.13.0'
}

spotless {
    java {
        // 모든 Java 소스 파일에 포맷팅 규칙 적용
        target("**/*.java")
        // google 자바 포맷 적용
        googleJavaFormat()
        // 불필요한 임포트 제거
        removeUnusedImports()
        // 마지막줄 New Line 처리
        endWithNewline()
        // 공백 제거
        trimTrailingWhitespace()
        //임포트 순서 정리
        importOrder(
                "java",
                "javax",
                "lombok",
                "org.springframework",
                "",
                "org.junit",
                "com.guide"
        )
    }
}

springBoot {
    mainClass = 'com.inhabas.api.ApiApplication'
}

repositories {
    mavenCentral()
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.inhabas'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'

    repositories {
        mavenCentral()
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
        annotationProcessor(
                'org.projectlombok:lombok',
                'org.springframework.boot:spring-boot-configuration-processor',
                'jakarta.persistence:jakarta.persistence-api',
                'jakarta.annotation:jakarta.annotation-api',
                "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
        )

        implementation (
                'org.springframework.boot:spring-boot-starter-web',
                'org.springframework.boot:spring-boot-starter-validation',
                'org.springdoc:springdoc-openapi-ui:1.6.0',
                'com.google.code.findbugs:jsr305:3.0.2',

                // cloud config
                'org.springframework.cloud:spring-cloud-starter-config:3.1.0',
                'org.springframework.boot:spring-boot-starter-actuator:2.6.2',
                'org.springframework.cloud:spring-cloud-starter-bootstrap:3.1.0',
        )
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        developmentOnly "org.springframework.boot:spring-boot-devtools"
        compileOnly 'org.projectlombok:lombok'


        runtimeOnly(
                'org.mariadb.jdbc:mariadb-java-client',
                'com.h2database:h2'
        )
    }

    test {
        useJUnitPlatform()
    }

}

project(':module-jpa') {
    bootJar {enabled = false}
    jar {enabled = true}

    dependencies {
        api (
                'org.springframework.boot:spring-boot-starter-data-jpa',
                'com.querydsl:querydsl-jpa', // query dsl
                'com.jcraft:jsch:0.1.55',  // 로컬 개발용 db ssh tunneling, https://mavenlibs.com/maven/dependency/com.jcraft/jsch
//                'org.mariadb.jdbc:mariadb-java-client',
                'mysql:mysql-connector-java',
                'com.h2database:h2'
        )
    }
}

project(':module-auth') {
    bootJar {enabled = false}
    jar {enabled = true}

    dependencies {
        api project(':module-jpa')
        // jwt
        api 'io.jsonwebtoken:jjwt-api:0.11.2'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2',
                // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
                //'org.bouncycastle:bcprov-jdk15on:1.60',
                'io.jsonwebtoken:jjwt-jackson:0.11.2' // or 'io.jsonwebtoken:jjwt-gson:0.11.2' for gson

        // security
        api 'org.springframework.boot:spring-boot-starter-security'
        api 'org.springframework.boot:spring-boot-starter-oauth2-client'
        api 'org.springframework.security:spring-security-core:5.1.6.RELEASE'
        api 'javax.xml.bind:jaxb-api'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'org.mockito:mockito-inline:2.13.0'
    }
}

project(':module-fileStorage') {
    bootJar {enabled = false}
    jar {enabled = false}
}


project(':resource-server') {
    dependencies {
        api project(':module-auth')
        testImplementation 'org.springframework.security:spring-security-test'
    }

    clean {
        delete file('src/main/generated')
    }

    task cleanGeneratedDir(type: Delete) {
        delete file('src/main/generated')
    }
}